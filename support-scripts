#
# BEGIN SUPPORT SCRIPTS
#
# These scripts are injected into the templates as supporting code
# which may be used by multiple scripts.

# Enable SSH agent by default on Darwin
if [[ ! ${EDI_SSH_AGENT_CONTAINER+x} ]]
then
   if [[ "$OSTYPE" == "darwin"* ]]
   then
       EDI_SSH_AGENT_CONTAINER="yes"
   else
       EDI_SSH_AGENT_CONTAINER=""
   fi
fi

# Calculates the desired ember version based on the current settings.
edi_calculate_docker_image() {
    ember_version=""
    if [ -n "$EDI_EMBER_VERSION" ]
    then
        ember_version="$EDI_EMBER_VERSION"
    else
        ember_version="$VERSION"
    fi

    echo "madnificent/ember:$ember_version"
}

# Prints out the docker volume options for supporting the linked
# node_volumes as constructed by the edl command.
edi_calculate_linked_volumes_for_node_modules() {
    mkdir -p $HOME/.local/lib/node_modules/
    linked_volumes=""

    if [ -n "$EDI_MOUNT_ONLY_USED_LINKED_MODULES" ]
    then
        node_modules_next_search_folders=("./node_modules")
        until [ "${#node_modules_next_search_folders[@]}" -eq 0 ]
        do
            node_modules_search_folders="${node_modules_next_search_folders[@]}"
            node_modules_next_search_folders=()
            # echo "Checking folders: ${node_modules_search_folders[@]}"
            for folder in ${node_modules_search_folders[@]}
            do
                for file in `find $folder -maxdepth 2 -type l`
                do
                    # echo "Adding link: $file"
                    name=`basename $file`
                    dirname=`dirname $file`
                    if [  $dirname != $HOME/.local/lib/node_modules ]; then
                      name=`basename $dirname`/$name
                    fi
                    source_folder=`readlink "$HOME/.local/lib/node_modules/$name"`
                    if [ -n $EDI_MOUNT_USED_NODE_MODULES_WITHOUT_SYMLINKS ]
                    then
                        linked_volumes="$linked_volumes --volume $source_folder:/app/node_modules/$name/:cached "
                    else
                        linked_volumes="$linked_volumes --volume $source_folder:/usr/lib/node_modules/$name/:cached "
                    fi
                    node_modules_next_search_folders=("${node_modules_next_search_folders[@]}" "$source_folder/node_modules/")
                done
                # echo "Current linked volumes: $linked_volumes"
            done
        done
        echo "$linked_volumes"
    else
        for file in `find $HOME/.local/lib/node_modules/ -maxdepth 2 -type l`
        do
            name=`basename $file`
            dirname=`dirname $file`
            if [  $dirname != $HOME/.local/lib/node_modules ]; then
              name=`basename $dirname`/$name
            fi
            real_target=`readlink $file`
            linked_volumes="$linked_volumes --volume $file:/usr/lib/node_modules/$name/:delegated "
        done
        echo "$linked_volumes"
    fi
}

# Prints out docker options needed for supporting the chosen ssh
# agent.
edi_calculate_ssh_agent_options() {
    mkdir -p $HOME/.ssh
    touch $HOME/.ssh/known_hosts
    known_hosts_volume_option="--volume $HOME/.ssh/known_hosts:/root/.ssh/known_hosts:cached "

    if [ -n "$EDI_SSH_AGENT_CONTAINER" ]
    then
        SSH_AGENT_NAME="pinata-sshd"

        # start ssh agent, which forwards ssh-socket. Known bug in
        # docker for mac: https://github.com/docker/for-mac/issues/410
        if [ ! "$(docker ps -q -f name=$SSH_AGENT_NAME)" ]; then

            echo "Starting $SSH_AGENT_NAME"

            if [ "$(docker ps -aq -f status=exited -f name=$SSH_AGENT_NAME)" ]; then
                # cleanup
                docker rm $SSH_AGENT_NAME
            fi
            pinata-ssh-forward
            ssh-add
        fi
        ssh_agent_options="$(pinata-ssh-mount)"
    else
        # see https://gist.github.com/d11wtq/8699521
        ssh_agent_options="--volume $(dirname $SSH_AUTH_SOCK):$(dirname $SSH_AUTH_SOCK) \
                           -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK"
    fi

    all_options="$ssh_agent_options $known_hosts_volume_option"
    eval "$1='$all_options'"
}

# Standard docker options including
# - mounting of the application
# - linked volumes for npm link
# - options for sharing the ssh agent
edi_calculate_standard_docker_options() {
    app_volumes="--volume `pwd`:/app/:cached \
                 --volume /app/tmp \
                 --volume $HOME/.gitconfig:/root/.gitconfig:delegated \
                 --volume $HOME/.npmrc:/root/.npmrc:delegated"
    linked_volumes=`edi_calculate_linked_volumes_for_node_modules`
    edi_calculate_ssh_agent_options ssh_agent_options

    all_options="$app_volumes $linked_volumes $ssh_agent_options"
    eval "$1='$all_options'"
}

edi_start_edi_daemon() {
    project_name=`basename $(pwd) | sed -e "s/ /-/g"`
    container_name="edi-$project_name"

    # sets return value
    eval "$1=$container_name"
    DOCKER_IMAGE=$2
    DOCKER_OPTIONS=$3

    # check if daemon container runs, if not start it (and clean eventual exited containers)
    # see https://stackoverflow.com/questions/38576337/execute-bash-command-if-docker-container-does-not-exist
    if ! edi_does_container_exist $container_name; then

        # cleanup exited edi daemon
        if [ "$(docker ps -aq -f status=exited -f name=$container_name)" ]; then
            docker rm $container_name
        fi

        # run new edi daemon
        echo "Starting container named $container_name"

        docker run -td --name $container_name \
               $DOCKER_OPTIONS \
               $DOCKER_IMAGE

        edi_wait_for_edi_daemon $container_name
    fi
}

edi_wait_for_edi_daemon() {
    container_name=$1
    max_attempts=10
    sleep_time=1

    attempt=1

    while [ $attempt -le $max_attempts ]; do
        echo "Waiting for $container_name to start, attempt number $attempt"

        if edi_does_container_exist $container_name && $(docker inspect -f "{{.State.Running}}" $container_name); then
            echo "container $container_name is running, proceeding..."
            return
        fi

        echo "Container $container_name not started, sleeping $sleep_time second(s)"
        sleep $sleep_time
        let attempt=$attempt+1
    done

    echo "Error: $container_name failed to start within $max_attempts attempts..."
}

edi_does_container_exist() {
    container_name=$1
    [ "$(docker ps -q -f name=$container_name)" ]
    return
}

edi_docker_host_option() {
    if [[ "$OSTYPE" == "linux-gnu" ]]
    then
        # Linux
        DOCKERHOST=`ip addr show docker0 | grep inet | head -n 1 | awk '{ print $2 }' | grep -oP "^[^/]+"`
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # Mac OSX
        # Solution found via https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach
        DOCKERHOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)
    fi
    echo "--add-host host:$DOCKERHOST "
}

edi_docker_server_exposed_ports_option() {
    # We receive the ember version but ignore it for now
    echo "-p 4200:4200 \
          -p 7020:7020 \
          -p 49152:49152 \
          -p 49153:49153 "
}

#
# END SUPPORT SCRIPTS
#
